---
import BaseLayout from "../layouts/baseLayout.astro";
import categories from "../data/appsCategories.json";
import Toast from "../components/toast/toast.astro";
import TextInput from "../components/forms/textInput.astro";
import UsernameInput from "../components/forms/usernameInput.astro";
import "../styles/main.css";

let categoriesList = [];
for (const key in categories) {
  categories[key].key = key;
  categoriesList.push(categories[key]);
}

let platformList = ["Windows", "Linux", "macOS", "Web", "Android", "iOS"];
---

<BaseLayout title="Publicar Nueva Aplicación" description="Cucoders es la plataforma perfecta para lanzar tu próxima aplicación. Conecta con una comunidad de desarrolladores talentosos y accede a recursos y herramientas esenciales para ayudarte a dar forma a tu idea. ¡Comienza tu proyecto hoy y conviértete en parte de la comunidad de programadores líderes en la región!" >
  <div
    class="bg-white border mb-6 md:mx-auto p-8 -mt-6 md:mt-12 lg:max-w-[58rem] border-gray-200 rounded-lg dark:bg-gray-800 dark:border-gray-700 w-full"
  >
    <div>
      <label for="username" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">GitHub</label>
      <div class="flex">
        <span
          class="inline-flex items-center px-3 text-sm text-gray-900 bg-gray-200 border border-r-0 border-gray-300 rounded-l-md dark:bg-gray-600 dark:text-gray-400 dark:border-gray-600"
        >
          @
        </span>
        <input
          type="text"
          id="username"
          class="rounded-none rounded-r-lg bg-gray-50 border text-gray-900 focus:ring-gray-500 focus:border-gray-500 block flex-1 min-w-0 w-full text-sm border-gray-300 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-gray-500 dark:focus:border-gray-500"
          placeholder="Nombre de Usuario"
        />
        <button
          id="loadUserBtn"
          class="text-white disabled:opacity-50 w-auto ml-5 bg-[#24292F] hover:bg-[#24292F]/90 focus:ring-4 focus:outline-none focus:ring-[#24292F]/50 font-medium rounded-lg text-sm px-5 py-2.5 text-center flex content-center justify-center items-center dark:focus:ring-gray-500 dark:hover:bg-[#050708]/30 mr-2"
        >
          <svg
            id="spinner-ico"
            aria-hidden="true"
            role="status"
            class="hidden w-4 h-4 mr-2 text-white animate-spin"
            viewBox="0 0 100 101"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
              fill="#E5E7EB"></path>
            <path
              d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
              fill="currentColor"></path>
          </svg>
          <svg
            id="github-ico"
            class="w-4 h-4 mr-2"
            aria-hidden="true"
            focusable="false"
            data-prefix="fab"
            data-icon="github"
            role="img"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 496 512"
            ><path
              fill="currentColor"
              d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"
            ></path></svg
          >
          Cargar</button
        >
      </div>
    </div>
  </div>

  <div
    id="app-form"
    class="bg-white hidden border md:mx-auto mb-5 p-8 lg:max-w-[58rem] border-gray-200 rounded-lg dark:bg-gray-800 dark:border-gray-700 w-full"
  >
    <div class="flex justify-between">
      <h1 class="text-xl font-bold">Nueva Aplicación</h1>
    </div>

    <hr class="my-4" />

    <input type="hidden" id="user-id" />

    <div>
      <input type="hidden" id="github-username" />
      <div class="grid gap-6 mb-6 md:grid-cols-2">
        <TextInput id="name" label="Nombre *" maxlength="80" />
        <TextInput id="logo" label="Logo *" placeholder="URL de la imagen" maxlength="200" />
      </div>
      <div class="mb-6">
        <TextInput id="description" label="Descripción *" maxlength="200" />
      </div>
      <div class="grid gap-6 mb-6 md:grid-cols-2">
        <TextInput id="website" label="Sitio Web" type="url" />
        <TextInput id="email" label="Email" type="email" />
        <div class="flex items-center">
          <input
            id="is-open-source"
            type="checkbox"
            value=""
            class="w-4 h-4 text-gray-600 bg-gray-100 border-gray-300 rounded focus:ring-gray-500 dark:focus:ring-gray-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
          />
          <label for="is-open-source" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Es de Código Abierto</label
          >
        </div>
        <TextInput id="repository_url" label="Repositorio URL" type="url" />
        <UsernameInput id="twitter_username" label="Twitter" placeholder="Nombre de Usuario" />
        <UsernameInput id="telegram_username" label="Telegram" placeholder="Nombre de Usuario" />
      </div>
    </div>

    <div class="mb-6">
      <label for="categories" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Categorias</label>
      <select id="categories" name="state[]" multiple placeholder="Categorias" autocomplete="off">
        <option value="">Select a state...</option>
        {categoriesList.map((category) => <option value={category.key}>{category.text}</option>)}
      </select>
    </div>

    <div class="mb-6">
      <label for="platforms" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Plataformas</label>
      <select id="platforms" name="state[]" multiple placeholder="Plataformas" autocomplete="off">
        <option value="">Select a state...</option>
        {platformList.map((category) => <option value={category}>{category}</option>)}
      </select>
    </div>

    <div class="flex justify-center">
      <button
        id="createApp"
        class="text-white mt-4 mx-2 bg-gray-800 hover:bg-gray-900 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-gray-600 dark:hover:bg-gray-700 dark:focus:ring-gray-800"
        >Publicar Aplicación</button
      >
    </div>
  </div>

  <Toast />
</BaseLayout>

<link href="https://cdn.jsdelivr.net/npm/tom-select/dist/css/tom-select.css" rel="stylesheet" />
<script is:inline src="https://cdn.jsdelivr.net/npm/tom-select/dist/js/tom-select.complete.min.js"></script>

<script is:inline>
  var control = new TomSelect("#categories", {
    maxItems: 4,
  });

  var control2 = new TomSelect("#platforms", {});
</script>

<script>
  import { backend_url } from "../data/conf.json";
  import { showToast } from "../components/toast/toast";

  const loadUserBtn = document.getElementById("loadUserBtn");
  loadUserBtn.addEventListener("click", loadUserData, true);

  const proflieBtn = document.getElementById("createApp");
  proflieBtn.addEventListener("click", createApp, true);

  async function loadUserData() {
    const username = (<HTMLInputElement>document.getElementById("username")).value;

    disableInput();
    const isMember = await isCommunityMemeber(username);
    if (!isMember) {
      const alert = `El usuario ${username} no es miembro de la Comunidad. Necesitas registrarte primero para publicar una aplicación.`;
      showToast(alert, true);
      enableInput();
      return;
    }
    await getGithubCaseUsername(username);
    enableInput();
    (<HTMLInputElement>document.getElementById("app-form")).classList.remove("hidden");
  }

  async function isCommunityMemeber(username) {
    const url = backend_url + "api/members/is-member?username=" + username;
    try {
      const response = await fetch(url, { method: "GET" });
      const data = await response.json();
      return data.is_member;
    } catch {
      return false;
    }
  }

  async function getGithubCaseUsername(username) {
    fetch("https://api.github.com/users/" + username, {
      method: "GET",
    })
      .then((response) => response.json())
      .then((data) => {
        getElem("github-username").value = data.login;
      })
      .catch((e) => {
        showToast("Ocurrió un error inesperado. Por favor vuelva a intentarlo más tarde.", true);
        enableInput();
      });
  }

  function disableInput() {
    (<HTMLInputElement>document.getElementById("loadUserBtn")).setAttribute("disabled", "");
    (<HTMLInputElement>document.getElementById("spinner-ico")).classList.remove("hidden");
    (<HTMLInputElement>document.getElementById("spinner-ico")).classList.add("inline");
    (<HTMLInputElement>document.getElementById("github-ico")).classList.add("hidden");
  }

  function enableInput() {
    (<HTMLInputElement>document.getElementById("loadUserBtn")).removeAttribute("disabled");
    (<HTMLInputElement>document.getElementById("spinner-ico")).classList.add("hidden");
    (<HTMLInputElement>document.getElementById("spinner-ico")).classList.remove("inline");
    (<HTMLInputElement>document.getElementById("github-ico")).classList.remove("hidden");
  }

  function createApp() {
    const username = (<HTMLInputElement>document.getElementById("github-username")).value;
    const fileName = getElem("name").value.replace(/[^a-zA-Z0-9]+/g, "-") + ".md";
    const fileText = createAppData();
    const encodedFileText = encodeURIComponent(fileText);
    const githubQueryLink = `https://github.com/CuCodersCommunity/cucoderscommunity.github.io/new/main/src/content/apps/${username}/new?value=${encodedFileText}&filename=${fileName}`;
    window.open(githubQueryLink);
  }

  function getElem(id) {
    return <HTMLInputElement>document.getElementById(id);
  }

  function createAppData() {
    return `---
name: "${getElem("name").value}"
id: "${getElem("name").value.replace(/[^a-zA-Z0-9]+/g, "-")}"
description: "${getElem("description").value}"
logo: "${getElem("logo").value}"
email: "${getElem("email").value}"
website: "${getElem("website").value}"
is_open_source: ${getElem("is-open-source").checked}
repository_url: "${getElem("repository_url").value}"
twitter_username: "${getElem("twitter_username").value}"
telegram_username: "${getElem("telegram_username").value}"
dev_username: "${getElem("github-username").value}"
pubDate: "${new Date().toDateString()}"
categories: ${JSON.stringify(getSelectedElements("categories"))}
platforms: ${JSON.stringify(getSelectedElements("platforms"))}
---

Aquí va la descripción general de tu app en formato MarkDown.`;
  }

  function getSelectedElements(id) {
    var list = [];
    for (let option of (<HTMLSelectElement>document.getElementById(id)).options) {
      if (option.selected) {
        list.push(option.value);
      }
    }
    return list;
  }
</script>
